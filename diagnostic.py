#!/usr/bin/env python3
"""
Script de diagnostic pour identifier les probl√®mes dans l'application
"""

import os
import sys
from app.models.database import SessionLocal, init_db
from app.models import User, Client, Mission
from app.services.mission_service import MissionService
from app.services.auth_service import AuthService

def check_database_connection():
    """V√©rifier la connexion √† la base de donn√©es"""
    print("üîç V√©rification de la connexion √† la base de donn√©es...")
    
    try:
        init_db()
        session = SessionLocal()
        session.execute("SELECT 1")
        session.close()
        print("‚úÖ Connexion √† la base de donn√©es OK")
        return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        return False

def check_tables():
    """V√©rifier que toutes les tables existent"""
    print("\nüìã V√©rification des tables...")
    
    try:
        session = SessionLocal()
        
        # V√©rifier la table users
        users_count = session.query(User).count()
        print(f"‚úÖ Table users: {users_count} utilisateurs")
        
        # V√©rifier la table clients
        clients_count = session.query(Client).count()
        print(f"‚úÖ Table clients: {clients_count} clients")
        
        # V√©rifier la table missions
        missions_count = session.query(Mission).count()
        print(f"‚úÖ Table missions: {missions_count} missions")
        
        session.close()
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des tables: {e}")
        return False

def check_users():
    """V√©rifier les utilisateurs"""
    print("\nüë• V√©rification des utilisateurs...")
    
    try:
        session = SessionLocal()
        users = session.query(User).all()
        
        if not users:
            print("‚ö†Ô∏è  Aucun utilisateur trouv√©")
            return False
        
        print(f"‚úÖ {len(users)} utilisateurs trouv√©s:")
        for user in users:
            print(f"   - {user.username} (r√¥le: {user.role})")
        
        # V√©rifier qu'il y a au moins un t√©l√©pilote
        telepilotes = session.query(User).filter(User.role == "telepilote").all()
        if not telepilotes:
            print("‚ö†Ô∏è  Aucun t√©l√©pilote trouv√© - n√©cessaire pour cr√©er des missions")
            return False
        else:
            print(f"‚úÖ {len(telepilotes)} t√©l√©pilotes disponibles")
        
        session.close()
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des utilisateurs: {e}")
        return False

def check_mission_service():
    """Tester le service de mission"""
    print("\nüöÅ Test du service de mission...")
    
    try:
        mission_service = MissionService()
        
        # Test de r√©cup√©ration des missions
        missions = mission_service.get_all_missions()
        print(f"‚úÖ R√©cup√©ration des missions: {len(missions)} missions trouv√©es")
        
        # Test de r√©cup√©ration des t√©l√©pilotes
        telepilotes = AuthService.get_users_by_role("telepilote")
        print(f"‚úÖ R√©cup√©ration des t√©l√©pilotes: {len(telepilotes)} t√©l√©pilotes trouv√©s")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du test du service de mission: {e}")
        return False

def check_files():
    """V√©rifier les fichiers n√©cessaires"""
    print("\nüìÅ V√©rification des fichiers...")
    
    required_files = [
        "app/main_app.py",
        "app/services/mission_service.py",
        "app/services/auth_service.py",
        "app/models/database.py",
        "app/models/mission.py",
        "app/models/client.py",
        "app/models/user.py",
        "app/assets/kv/create_mission.kv",
        "app/assets/kv/edit_mission.kv",
        "app/assets/kv/validation_mission.kv"
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - MANQUANT")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è  {len(missing_files)} fichiers manquants")
        return False
    else:
        print("‚úÖ Tous les fichiers n√©cessaires sont pr√©sents")
        return True

def main():
    """Fonction principale de diagnostic"""
    print("üîß DIAGNOSTIC DE L'APPLICATION DRONE GESTION")
    print("=" * 50)
    
    checks = [
        ("Connexion √† la base de donn√©es", check_database_connection),
        ("Tables de la base de donn√©es", check_tables),
        ("Utilisateurs", check_users),
        ("Service de mission", check_mission_service),
        ("Fichiers n√©cessaires", check_files)
    ]
    
    results = []
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Erreur lors du check '{name}': {e}")
            results.append((name, False))
    
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DU DIAGNOSTIC")
    print("=" * 50)
    
    passed = 0
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {name}")
        if result:
            passed += 1
    
    print(f"\nüéØ {passed}/{len(results)} v√©rifications r√©ussies")
    
    if passed == len(results):
        print("\nüéâ Tous les tests sont pass√©s! L'application devrait fonctionner correctement.")
    else:
        print(f"\n‚ö†Ô∏è  {len(results) - passed} probl√®me(s) d√©tect√©(s). Veuillez les corriger.")
        
        if not any(result for name, result in results if "Connexion" in name):
            print("\nüí° SUGGESTIONS:")
            print("   1. V√©rifiez que MySQL est d√©marr√©")
            print("   2. V√©rifiez les param√®tres de connexion dans app/models/database.py")
            print("   3. Ex√©cutez: python add_test_users.py pour cr√©er des utilisateurs de test")

if __name__ == "__main__":
    main() 